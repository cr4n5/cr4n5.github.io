<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hgame_week_1_writeup</title>
    <link href="/2024/02/15/Hgame_week_1/"/>
    <url>/2024/02/15/Hgame_week_1/</url>
    
    <content type="html"><![CDATA[<p>#WEB<br>##Bypass it<br>禁用js防止注册时弹窗即可<br><img src="/img/Hgame_week_1/image.png" alt="alt text"><br>随后进行注册登陆即可获得flag<br><img src="/img/Hgame_week_1/image-1.png" alt="alt text"><br>点击获取flag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">hgame&#123;e<span class="hljs-number">3983</span>cd<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>de<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">35e21</span>e<span class="hljs-number">592</span>d<span class="hljs-number">443965</span>ac<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>eb<span class="hljs-number">93</span><span class="hljs-keyword">c</span>&#125;<br></code></pre></td></tr></table></figure><p>##ezHTTP<br>从vidar.club访问这个页面<br>将请求中的Referer值修改为vidar.club<br><img src="/img/Hgame_week_1/image-4.png" alt="alt text"><br>请通过Mozilla&#x2F;5.0 (Vidar; VidarOS x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;121.0.0.0 Safari&#x2F;537.36 Edg&#x2F;121.0.0.0访问此页面<br>将请求中的User-Agent值修改为上述值<br><img src="/img/Hgame_week_1/image-5.png" alt="alt text"><br>请从本地访问这个页面<br>在响应中有Hint:Not xff<br>尝试过许多姿势，将请求种X-real-ip值修改为127.0.0.1<br><img src="/img/Hgame_week_1/image-6.png" alt="alt text"><br>可以看到响应中有一串jwt token，解码可得flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">hgame</span><span class="hljs-template-variable">&#123;HTTP_!s_1mP0rT4nt&#125;</span><br></code></pre></td></tr></table></figure><p>#CRYPTO<br>##奇怪的图片<br>题目将flag的每个字符按序draw在一张随机生成的图片中，并每张与随机生成的key image进行xor操作，save。但由于time.sleep()，无法确认每张image的生成顺序。<br>按顺序来说，每张image都会在前一张添加一个字符，而未改变的像素点，两张图片进行xor后仍然相同，那么就随意取一张image与另外所有的image进行比较，将相同的像素点draw在一张白底的image上，剩下的白色部分即draw在上面的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list_files_in_directory</span>(<span class="hljs-params">directory</span>):<br>    name=[]<br>    files = os.listdir(directory)<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>        file_path = os.path.join(directory, file)<br>        <span class="hljs-keyword">if</span> os.path.isfile(file_path):<br>            name.append(file)<br>    <span class="hljs-keyword">return</span> name<br><br>directory_path = <span class="hljs-string">&quot;D:/crane/Desktop/attachment (3)/png_out&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">compare_images</span>(<span class="hljs-params">image1, image2</span>):<br>    i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> image1.size != image2.size:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Images must have the same dimensions.&quot;</span>)<br><br>    width, height = image1.size<br>    result_image = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (width, height), <span class="hljs-string">&quot;white&quot;</span>)<br>    result_draw = ImageDraw.Draw(result_image)<br>    <br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>            pixel1 = image1.getpixel((x, y))<br>            pixel2 = image2.getpixel((x, y))<br>            <br>            <span class="hljs-keyword">if</span> pixel1 == pixel2:<br>                i=i+<span class="hljs-number">1</span><br>                result_draw.point((x, y), fill=pixel1)<br><br>    <span class="hljs-keyword">return</span> result_image,i<br><br>name=list_files_in_directory(directory_path)<br>rank=[]<br>result=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(name)):<br>    image1_path = <span class="hljs-string">&quot;D:/crane/Desktop/attachment (3)/png_out/4e8a536e.png&quot;</span><br>    image2_path = <span class="hljs-string">&quot;D:/crane/Desktop/attachment (3)/png_out/&quot;</span>+name[i]<br>    image1 = Image.<span class="hljs-built_in">open</span>(image1_path, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    image2 = Image.<span class="hljs-built_in">open</span>(image2_path, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    result_image,r = compare_images(image1, image2)<br>    rank.append(r)<br>    result.append(result_image)<br>    result_image.save(<span class="hljs-string">&quot;&#123;&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(i))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(rank)):<br>    index=i<br>    <span class="hljs-built_in">max</span>=rank[i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(rank)):<br>        <span class="hljs-keyword">if</span> rank[index]&lt;rank[j]:<br>            <span class="hljs-built_in">max</span>=rank[j]<br>            index=j<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">max</span>!=rank[i]:<br>            rank[index]=rank[i]<br>            rank[i]=<span class="hljs-built_in">max</span><br>            temp=result[i]<br>            result[i]=result[index]<br>            result[index]=temp<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(result)):<br>    result[i].save(<span class="hljs-string">&quot;&#123;&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(rank[i])<br>    <span class="hljs-built_in">print</span>(name[i])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;.png&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------------------------------------------------&quot;</span>)<br></code></pre></td></tr></table></figure><p>由于是随机选择的image，需要将生成的image进行排序分类，以便分析。<br><img src="/img/Hgame_week_1/image-7.png" alt="alt text"><br><img src="/img/Hgame_week_1/image-8.png" alt="alt text"><br>一组是在选择的image后添加的字符，一组为image前添加的字符，分析添加的顺序，与flag格式hgame{}可得flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hgame</span>&#123;<span class="hljs-number">1</span>adf_17eb_803c&#125;<br></code></pre></td></tr></table></figure><p>##ezMath<br>分析代码，采用AES将flag加密，key由以下语句生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">D = <span class="hljs-number">114514</span><br><span class="hljs-keyword">assert</span> x**<span class="hljs-number">2</span> - D * y**<span class="hljs-number">2</span> == <span class="hljs-number">1</span><br>key=pad(long_to_bytes(y))[:<span class="hljs-number">16</span>]<br></code></pre></td></tr></table></figure><p>可以发现这是佩尔方程，用连分数法解出y即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br>d = <span class="hljs-number">114514</span><br>m = <span class="hljs-built_in">int</span>(np.sqrt(d))<br>dq = deque()<br>dq.append(m)<br>n0 = n1 = d - m * m<br>m1 = m<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    q, m2 = <span class="hljs-built_in">divmod</span>(m1 + m, n1)<br>    dq.appendleft(q)<br>    m1 = -m2+m<br>    n1 = (d-m1*m1)//n1<br>    <span class="hljs-keyword">if</span> m1 == m <span class="hljs-keyword">and</span> n1 == n0:<br>        <span class="hljs-keyword">break</span><br><br>dq.popleft()<br>b = <span class="hljs-number">1</span><br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dq:<br>    b1 = c + b * i<br>    c = b<br>    b = b1<br><br><br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x+<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(x)%<span class="hljs-number">16</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">KEY</span>):<br>    cipher= AES.new(KEY,AES.MODE_ECB)<br>    decrypted =cipher.decrypt(enc)<br>    <span class="hljs-keyword">return</span> decrypted<br><br>key=pad(long_to_bytes(c))[:<span class="hljs-number">16</span>]<br>enc=<span class="hljs-string">b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span><br><span class="hljs-built_in">print</span>(decrypt(key))<br></code></pre></td></tr></table></figure><p>解出flag</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">hgame&#123;G0od!_Yo3_k1ow_C0ntinued_Fra3ti0ns!!!!!!!&#125;<br></code></pre></td></tr></table></figure><p>##ezRSA<br>解出p，q即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">leak1=<span class="hljs-built_in">pow</span>(p,q,n)<br>leak2=<span class="hljs-built_in">pow</span>(q,p,n)<br></code></pre></td></tr></table></figure><p>可以发现leak1*leak2与leak1，leak2的公因数即是p，q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>leak1=<span class="hljs-number">149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span><br>leak2=<span class="hljs-number">116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span><br>c=<span class="hljs-number">10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span><br><br>p = GCD(leak1*leak2, leak2)<br>q = GCD(leak1*leak2, leak1)<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e=<span class="hljs-number">0x10001</span><br>d = inverse(e, phi)<br>n=p*q<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>plain=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(plain)<br></code></pre></td></tr></table></figure><p>解出flag</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">hgame&#123;F<span class="hljs-number">3</span>rmat<span class="hljs-number">_</span>l<span class="hljs-number">1</span>tt<span class="hljs-number">1</span>e<span class="hljs-number">_</span>the<span class="hljs-number">0</span>rem<span class="hljs-number">_</span><span class="hljs-keyword">is</span><span class="hljs-number">_</span>th<span class="hljs-number">3_</span>bas<span class="hljs-number">1</span>s&#125;<br></code></pre></td></tr></table></figure><p>##ezPRNG<br>LFSR问题，可以发现生成的output每32位为一周期，将随机生成的uuid的去除‘-’，每8位进行加密。mask只有第1、4、8、11、15、20、25、28、32这几位为1，其余位均为0，反馈函数即每1位上的异或。最后再依次异或解出flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">mask=<span class="hljs-number">0b10001001000010000100010010001001</span><br><span class="hljs-built_in">input</span>=[<span class="hljs-string">&#xx27;</span>, <span class="hljs-string">&#xx27;</span>, <span class="hljs-string">&#xx27;</span>, <span class="hljs-string">&#xx27;</span>]<br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>      key1=<span class="hljs-built_in">input</span>[i][<span class="hljs-number">0</span>:<span class="hljs-number">32</span>]<br>      key2=key1<br>      flag=[]<br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            output=<span class="hljs-string">&#x27;?&#x27;</span>+key1[:<span class="hljs-number">31</span>]<br>            flag.append(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(key2[-<span class="hljs-number">1</span>-i])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">1</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">4</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">8</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">11</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">15</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">20</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">25</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">28</span>])))<br>            key1=<span class="hljs-built_in">str</span>(flag[i])+key1[:<span class="hljs-number">31</span>]<br>      result+=<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(flag[::-<span class="hljs-number">1</span>]),<span class="hljs-number">2</span>)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>result=<span class="hljs-built_in">list</span>(result)<br>result.insert(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;-&#x27;</span>)<br>result.insert(<span class="hljs-number">13</span>,<span class="hljs-string">&#x27;-&#x27;</span>)<br>result.insert(<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;-&#x27;</span>)<br>result.insert(<span class="hljs-number">23</span>,<span class="hljs-string">&#x27;-&#x27;</span>)<br>result=<span class="hljs-string">&#x27;&#x27;</span>.join(result)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hgame&#123;&quot;</span>+result+<span class="hljs-string">&quot;&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p>注意结果要根据uuid增加“-”。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hgame</span>&#123;fbbbee82-<span class="hljs-number">3</span>f43-<span class="hljs-number">4</span>f91-<span class="hljs-number">9337</span>-<span class="hljs-number">907880</span>e4191a&#125;<br></code></pre></td></tr></table></figure><p>#MISC<br>##SignIn<br>可以发现图片宽度上进行了压缩，将图片拉长即可<br><img src="/img/Hgame_week_1/33c9125d38d962015369e99a7f67a98.jpg" alt="alt text"><br>可以看到flag为</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">hgame</span><span class="hljs-template-variable">&#123;WOW_GREAT_YOU_SEE_IT_WONDERFUL&#125;</span><br></code></pre></td></tr></table></figure><p>##simple_attack<br>是个zip加密，给了一张jpg与一个加密zip，查看zip内文件名，发现有与给出的jpg相同名称的文件。那么即是压缩包已知明文攻击，采用ARCHPR工具进行攻击。<br>初始攻击时，用winrar压缩图片，会报如图错误<br><img src="/img/Hgame_week_1/image-9.png" alt="alt text"><br>试过了许多压缩方式都不行（，最后询问出题人，用的是bandzip压缩。<br>攻击完成后压缩包内有photo.txt文件，为图片base64编码，且为url链接，复制到游览器即可打开。<br><img src="/img/Hgame_week_1/image-10.png" alt="alt text"><br>得到flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">hgame</span><span class="hljs-template-variable">&#123;s1mple_attack_for_zip&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hgame</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hgame</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
